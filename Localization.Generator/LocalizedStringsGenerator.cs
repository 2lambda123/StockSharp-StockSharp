using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;

using Microsoft.CodeAnalysis;

namespace StockSharp.Localization.Generator;

[Generator]
internal class LocalizedStringsGenerator : IIncrementalGenerator
{
    private class Pair
    {
        public string en { get; set; }
    }
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {


        context.RegisterSourceOutput(context.CompilationProvider, (ctx, compilation) =>
        {
            var enumerator = compilation.SyntaxTrees.GetEnumerator();
            SyntaxTree sTree = default!;
            while (enumerator.MoveNext())
            {
                sTree = enumerator.Current;
                break;
            }
            var filePath = sTree.FilePath;
            var dict = JsonSerializer.Deserialize<IDictionary<string, Pair>>(File.ReadAllText(Path.Combine(Path.GetDirectoryName(filePath), "translation.json")));
            var members = GenerateProperties(dict);
            string source = GetTypeWithMembers(members);

            ctx.AddSource($"LocalizedStrings_Items.cs", source);
        });

    }

    private static string GetTypeWithMembers(string members)
    {
        return $@"// <auto-generated />

namespace StockSharp.Localization;

partial class LocalizedStrings
{{
{members}
}}";
    }

    private static string GenerateProperties(IDictionary<string, Pair> dict)
    {
        var members = new StringBuilder();
        foreach (var p in dict)
        {
            var prop = p.Key;
            var xmlComment = p.Value.en.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;");

            members.AppendLine($@"	/// <summary>
	/// {xmlComment}
	/// </summary>
	public const string {prop}Key = nameof({prop});

	private static string _{prop};

	/// <summary>
	/// {xmlComment}
	/// </summary>
	public static string {prop} => _{prop} ??= GetString({prop}Key);").AppendLine();
        }
        return members.ToString();
    }

}
