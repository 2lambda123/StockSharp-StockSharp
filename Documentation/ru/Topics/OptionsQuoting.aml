<?xml version="1.0" encoding="utf-8"?>
<topic id="6fe5b321-a23d-415d-b3e3-af9de9212a20" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			Для котирования опционов реализована специальная стратегия 
			<codeEntityReference>T:StockSharp.Algo.Strategies.Derivatives.VolatilityQuotingStrategy</codeEntityReference>,
			которая предусматривает котирование объема по заданным границам волатильности.
		</para>
    </introduction>

	  <procedure>
		  <title>Котирование по волатильности</title>

		  <steps class="ordered">
			  <step>
				  <content>
					  <para>
						  В дистрибутиве <token>stocksharp</token> идет пример SampleOptionQuoting, 
						  который котирует выбранный страйк по заданной границе
						  волатильности.
					  </para>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Создание подключения к <link xlink:href="769f74c8-6f8e-4312-a867-3dc6e8482636" /> и запуск экспорта:
					  </para>
					  <code title="C#" language="C#"><![CDATA[
private void ConnectClick(object sender, RoutedEventArgs e)
{
	if (!_isConnected)
	{

        .......................................

		if (Trader == null)
		{
			// создаем подключение
	      Trader = new QuikTrader
	      {
	          LuaFixServerAddress = Address.Text.To<EndPoint>(),
	          LuaLogin = Login.Text,
	          LuaPassword = Password.Password.To<SecureString>(),
	          LogLevel = LogLevels.Debug
	      };


            .......................................			
			
			// Добавляем инструменты в компонент SecurityPicker
			Trader.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
			
			// Добавляем свои сделки в таблицу MyTradeGrid
			Trader.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
			
			// Добавляем сделки в таблицу TradeGrid
			Trader.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);
			
			// Добавляем заявки в таблицу OrderGrid
			Trader.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
			
			// Добавляем стоп-заявки в таблицу OrderGrid
			Trader.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);
			
			Trader.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
			Trader.OrderCancelFailed += fail => this.GuiAsync(() => MessageBox.Show(this, fail.Error.Message, "Ошибка отмены ордера"));
			Trader.StopOrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;
			Trader.StopOrderCancelFailed += fail => this.GuiAsync(() => MessageBox.Show(this, fail.Error.Message, "Ошибка отмены стоп ордера"));
			
			
			// Добавляем портфели в таблицу PortfolioGrid
			Trader.NewPortfolio += portfolio => _portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);
			
			// Добавляем позиции в таблицу PortfolioGrid
			Trader.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

			// устанавливаем поставщик маркет-данных для компонента SecurityPicker
			_securitiesWindow.SecurityPicker.MarketDataProvider = Trader;

			ShowSecurities.IsEnabled = ShowTrades.IsEnabled =
				ShowMyTrades.IsEnabled = ShowOrders.IsEnabled =
					ShowPortfolios.IsEnabled = ShowStopOrders.IsEnabled = true;
		}

		Trader.Connect();

		_isConnected = true;
		ConnectBtn.Content = LocalizedStrings.Disconnect;
	}
	else
	{
		Trader.Disconnect();

		_isConnected = false;
		ConnectBtn.Content = LocalizedStrings.Connect;
	}
}            		
	  				]]>
             </code>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Настройка стратегии <codeEntityReference>T:StockSharp.Algo.Strategies.Derivatives.VolatilityQuotingStrategy</codeEntityReference> (заполнение
						  границ волатильности, а также создание заявки, через которую указываются требуемый объем и направление котирования):
					  </para>
					  <code><![CDATA[
// создаем котирование на покупку 20-ти контрактов
var quoting = new VolatilityQuotingStrategy(Sides.Buy, 20,
		new Range<decimal>(ImpliedVolatilityMin.Value ?? 0, ImpliedVolatilityMax.Value ?? 100))
{
	// указываем, что котирование работает с объемом в 1 контракт
	Volume = 1,
	Security = option,
	Portfolio = Portfolio.SelectedPortfolio,
	Connector = Connector,
};
]]></code>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Запуск котирования:
					  </para>
					  <code language="C#">quoting.Start();</code>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
Для визуального представления волатильности пример показывает, как можно перевести стандартный стакан с котировками в стакан волатильности
за счет использования метода
<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Derivatives.DerivativesHelper.ImpliedVolatility(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider
,System.DateTimeOffset,System.Decimal,System.Decimal)</codeEntityReference>:
					  </para>
					  <code language="C#"><![CDATA[
private void OnQuotesChanged()
{
	DepthCtrl.UpdateDepth(_depth.ImpliedVolatility(Connector, Connector, Connector.CurrentTime));
}

]]></code>
					  <mediaLink>
						  <image placement="center" xlink:href="sample_quote_iv" />
					  </mediaLink>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Окончание котирования и остановка стратегии:
					  </para>
					  <code>quoting.Stop();</code>
				  </content>
			  </step>
		  </steps>
	  </procedure>

    <relatedTopics>
<link xlink:href="598efa7f-83fb-4dc8-8822-e6776362f652" />
    </relatedTopics>

  </developerConceptualDocument>
</topic>