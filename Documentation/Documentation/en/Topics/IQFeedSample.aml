<?xml version="1.0" encoding="utf-8"?>
<topic id="66003162-d1b0-4f5f-8126-508055d15470" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      	The application SampleIQFeed shows an example of working with <codeEntityReference>T:StockSharp.IQFeed.IQFeedTrader</codeEntityReference>
      	as shown in the figure below. The example source code is in the <legacyBold>Samples/IQFeed</legacyBold> folder of the installation package.
      </para>
      <mediaLink><image placement="center" xlink:href="IQFeedSample"/></mediaLink>
 	  <list class="ordered">
 	  	<listItem>
 	  		<para>First, you need to create an instance of the <codeEntityReference>T:StockSharp.IQFeed.IQFeedTrader</codeEntityReference>:</para>
 	  		<code language="C#">
Trader = new IQFeedTrader();
			</code>
		</listItem>
		<listItem>
 	  		<para>Next, you should subscribe on required <codeEntityReference>T:StockSharp.IQFeed.IQFeedTrader</codeEntityReference> events:</para>
 	  		<code language="C#">
// subscribe on successfully connect event
Trader.Connected += () =>
{
	// set flag (connection is established)
	_isConnected = true;

	// update gui labes
	this.GuiAsync(() => ChangeConnectStatus(true));
};

// subscribe on connection error event
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labes
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), "Connection was dropped.");	
});

// subscribe on successfully disconnect event
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// subscribe on error event
Trader.Error += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Data processing error"));

// new securities received
Trader.NewSecurities += securities => this.GuiAsync(() => _securitiesWindow.AddSecurities(securities));

// new anonymous trades received
Trader.NewTrades += trades => this.GuiAsync(() => _tradesWindow.Trades.AddRange(trades));

// news received
Trader.NewNews += news => this.GuiAsync(() => _newsWindow.News.Add(news));
			</code>
		</listItem>
		<listItem>
 	  		<para>Then you need to establish the connection:</para>
 	  		<code language="C#">
Trader.Connect();
			</code>
		</listItem>
		<listItem>
 	  		<para>The subscription to the news in the event handler will be done after a successful connection:</para>
 	  		<code language="C#">
Trader.RegisterNews();
			</code>
 	  		<para>After this operation the following events should be expected:</para>
 	  		<list class="ordered">
 	  			<listItem><codeEntityReference>E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> – instrument change (last price, best bid/ask price, etc.).</listItem>
 	  			<listItem><codeEntityReference>E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference> – 
 	  			order book change, requested through <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference> method.</listItem>
 	  			<listItem><codeEntityReference>E:StockSharp.BusinessEntities.IConnector.NewTrades</codeEntityReference> – 
 	  			new ticks on instruments subscribed by using <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> method.</listItem>
 	  			<listItem><codeEntityReference>E:StockSharp.BusinessEntities.IConnector.NewNews</codeEntityReference> – news.</listItem>
 	  		</list>
 	  	</listItem>
		<listItem>
 	  		<para>Instruments search (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">in more detail</link>):</para>
 	  		<mediaLink><image placement="center" xlink:href="IQFeedFindSecurity"/></mediaLink>
 	  		<code language="C#">
var criteria = new Security
{
	Type = (SecurityTypes)SecType.SelectedValue,
	Code = SecCode.Text,
};

MainWindow.Instance.Trader.LookupSecurities(criteria);
			</code>
		</listItem>
		<listItem>
 	  		<para>
 	  			For updates on the selected instrument and ticks you need to use the
 	  			<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference> and
 	  			<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> methods, respectively:
 	  		</para>
 	  		<code language="C#">
private void TradesClick(object sender, RoutedEventArgs e)
{
	var security = SelectedSecurity;
	var trader = MainWindow.Instance.Trader;

	if (_tradesSecurities.Contains(security))
	{
      	// unsubscribe from level1 flow
		trader.UnRegisterSecurity(security);
		trader.UnRegisterTrades(security);

		_tradesSecurities.Remove(security);
	}
	else
	{
		// subscribe to level1 flow
		trader.RegisterSecurity(security);
		trader.RegisterTrades(security);

		_tradesSecurities.Add(security);
	}
}
			</code>
		</listItem>
		<listItem>
 	  		<para>To request updates on the order books you need to use the <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference> method:</para>
 	  		<code language="C#">
private void Quotes_Click(object sender, RoutedEventArgs e)
{
    var window = _quotesWindows.SafeAdd(SelectedSecurity, security =>
    {
        // subscribe on order book flow
        MainWindow.Instance.Trader.RegisterMarketDepth(security);

        // create order book window
        var wnd = new QuotesWindow { Title = security.Code + " quotes" };
        wnd.MakeHideable();
        return wnd;
    });

    if (window.Visibility == Visibility.Visible)
        window.Hide();
    else
        window.Show();
}
			</code>
		</listItem>
		
		<!-- <listItem>
 	  		<para>Для получения полной информации по выбранной новости необходимо воспользоваться методом <codeEntityReference qualifyHint="true">M:StockSharp.IQFeed.IQFeedTrader.GetNewsStory(System.Int64)</codeEntityReference>:</para>
 	  		<mediaLink><image placement="center" xlink:href="IQFeedNews"/></mediaLink>
  	  		<code language="C#">
private void Control_OnMouseDoubleClick(object sender, MouseButtonEventArgs e)
{
	var news = List.SelectedItem as News;
	if (news == null)
		return;

	if (news.Story.IsEmpty())
		news.Story = MainWindow.Instance.Trader.GetNewsStory(news.Id);

	MessageBox.Show(this, news.Story, news.Headline);
}
			</code>
		</listItem> -->
		
		<listItem>
 	  		<para>For the trade history getting on the specified date the 
 	  		<codeEntityReference qualifyHint="true">M:StockSharp.IQFeed.IQFeedTrader.GetHistoricalLevel1(StockSharp.Messages.SecurityId,System.DateTimeOffset,System.DateTimeOffset,System.Boolean@)</codeEntityReference> method should be used:</para>
 	  		<mediaLink><image placement="center" xlink:href="IQFeedHistoryTrades"/></mediaLink>
  	  		<code language="C#">
Trades.Clear();
Trades.AddRange(MainWindow.Instance.Trader.GetTrades(SecurityPicker.SelectedSecurity, (DateTime)DatePicker.SelectedDate));
			</code>
		</listItem>
		<listItem>
 	  		<para>For the candles history on instrument getting on the specified period the 
 	  		<codeEntityReference qualifyHint="true">M:StockSharp.IQFeed.IQFeedTrader.GetHistoricalCandles(StockSharp.BusinessEntities.Security,System.Type,System.Object,System.Int64,System.Boolean@)</codeEntityReference> method should be used:</para>
 	  		<mediaLink><image placement="center" xlink:href="IQFeedHistoryCandles"/></mediaLink>
  	  		<code language="C#">
Candles.Clear();
Candles.AddRange(MainWindow.Instance.Trader.GetCandles(SecurityPicker.SelectedSecurity, (TimeSpan)TimeFramePicker.SelectedValue, (DateTimeOffset)DateFromPicker.SelectedDate, (DateTimeOffset)DateToPicker.SelectedDate));
			</code>
		</listItem>
      </list>
    </introduction>
  </developerConceptualDocument>
</topic>