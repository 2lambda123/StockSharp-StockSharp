<?xml version="1.0" encoding="utf-8"?>
<topic id="eca7454c-0532-4aaf-92bf-7a3d0cba635b" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>
		The <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference> class implements the <codeEntityReference>T:StockSharp.Logging.ILogSource</codeEntityReference>
		interface. Therefore, the strategies can be passed to the <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Sources</codeEntityReference>,
		and all of its messages will automatically get to the <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Listeners</codeEntityReference>.
		
		
		
		<!--можно использовать метод <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.AddLog(StockSharp.Algo.Strategies.ErrorStates,System.String,System.Object[])</codeEntityReference>.
		Передавая в него отладочную информацию или данные о ведении роботом торговли, <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference>
		автоматически перебрасывает их через событие <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Strategies.Strategy.Log</codeEntityReference>.
		Это сделано для того, чтобы внешний код (например, главное окно робота, где осуществляется запуск и остановка стратегий) мог
		обработать полученную информацию. Например, отобразить ее на экран пользователю.
		
		Для логирования сообщений предоставляет вспомогательный класс <codeEntityReference>T:StockSharp.Logging.StrategyLogManager</codeEntityReference>.
		При добавлении стратегии в коллекцию <codeEntityReference qualifyHint="true">P:StockSharp.Logging.StrategyLogManager.Strategies</codeEntityReference>
		<codeEntityReference>T:StockSharp.Logging.StrategyLogManager</codeEntityReference> автоматически подписывается на событие
		<codeEntityReference qualifyHint="true">E:StockSharp.Algo.Strategies.Strategy.Log</codeEntityReference>. После этого весь вывод сообщений
		будет переадресовываться в коллекцию <codeEntityReference qualifyHint="true">P:StockSharp.Logging.StrategyLogManager.Listeners</codeEntityReference>.
		По-умолчанию данная коллекция пустая. Чтобы сообщения из стратегий начали попадать, к примеру, в файл, нужно добавить соответствующий
		<codeEntityReference>T:StockSharp.Logging.StrategyLogListener</codeEntityReference>.-->
	</para>
    </introduction>
    
    <prerequisites>
		<content>
			<para>
				<link xlink:href="2c3a0d3a-6e89-42a1-a158-9a258e0a62e1">Trading strategies</link>
			</para>
		</content>
	</prerequisites>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <procedure>
			<title>Logging in to test file</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							First, you need to create the special manager:
						</para>
						<code language="C#">var logManager = new LogManager();</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Then you need to create a file logger, passing to it the name of the file and to add it to the <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Listeners</codeEntityReference>:
						</para>
						<code language="C#">var fileListener = new FileLogListener("{0}_{1:00}_{2:00}.txt".Put(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day));
logManager.Listeners.Add(fileListener);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							For logging messages, you need to add a strategy to the
							<codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogManager.Sources</codeEntityReference>:
						</para>
						<code language="C#">logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							After adding strategy to the logging manager all of its messages will be recorded to file.
						</para>
					</content>
				</step>
			</steps>
		</procedure>

		<procedure>
			<title>Sound playback</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							Creating a logger and passing the name of the sound file in it:
						</para>
						<code language="C#">var soundListener = new SoundLogListener("error.mp3");
						
logManager.Listeners.Add(soundListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Setting the filter in the sound playback only when the type of messages is
							<codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Error</codeEntityReference>:
						</para>
						<code language="C#">soundListener.Filters.Add(msg => msg.Level == LogLevels.Error);</code>
					</content>
				</step>
			</steps>
		</procedure>

		<procedure>
			<title>Email sending</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							The logger creating and passing to it sent letters parameters:
						</para>
						<code language="C#">var emailListener = new EmailLogListener("from@stocksharp.com", "to@stocksharp.com");

logManager.Listeners.Add(emailListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Setting the filter on the sending of messages of 
							<codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Error</codeEntityReference>
							and <codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Warning</codeEntityReference> types:
						</para>
						<code language="C#">emailListener.Filters.Add(msg => msg.Level == LogLevels.Error);
emailListener.Filters.Add(msg => msg.Level == LogLevels.Warning);</code>
					</content>
				</step>
			</steps>
		</procedure>

	<!--	<procedure>
			<title>Передача Sms через Google Calendar</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							Перед использованием <codeEntityReference>T:StockSharp.Logging.SmsLogListener</codeEntityReference>
							необходимо настроить Google Calendar, указав в нем номер телефона, и выключив уведомление через SMS. Подробнее,
							<token>calendar</token>.
						</para>
					</content>
				</step>
				<step>
					<content>
						<para>
							Создание логгера и передача в него логина и пароля от Google сервисов:
						</para>
						<code language="C#">var smsListener = new SmsLogListener("имя@gmail.com", "пароль");

logManager.Listeners.Add(smsListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Установка фильтра на отсылку сообщений типа <codeEntityReference qualifyHint="true">F:StockSharp.Logging.LogLevels.Error</codeEntityReference>:
						</para>
						<code language="C#">smsListener.Filters.Add(msg => msg.Level == LogLevels.Error);</code>
					</content>
				</step>
			</steps>
		</procedure> -->

		<procedure>
			<title>Logging in to the LogWindow</title>

			<steps class="ordered">
				<step>
					<content>
						<para>
							The <codeEntityReference>T:StockSharp.Xaml.GuiLogListener</codeEntityReference> logger creating:
						</para>
						<code language="C#">// each strategy will have they own windows
var guiListener = new GuiLogListener();

logManager.Listeners.Add(guiListener);
logManager.Sources.Add(lkohSmaStrategy);</code>
					</content>
				</step>
				<step>
					<content>
						<para>
							Here is the log window when orders quoting strategy working (<link xlink:href="24250c24-029c-4dbc-bc8b-4afde645e483"/>):
						</para>
						<mediaLink>
							<image placement="center" xlink:href="strategylogging" />
						</mediaLink>
					</content>
				</step>
			</steps>
		</procedure>
    
     <relatedTopics>
       <link xlink:href="4cd2b7f9-fe8d-404a-bec6-227783410beb">Visual logging components</link>
    </relatedTopics>
    
   
  </developerWalkthroughDocument>
</topic>