<?xml version="1.0" encoding="utf-8"?>
<topic id="0bcd3950-6fc9-463a-b473-6b0c6587f7f1" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
        <introduction>
      <para>
      	The <codeEntityReference>T:StockSharp.Xaml.OptionDesk</codeEntityReference> - graphic component is the table for option desk display. It shows “Greeks”, implied
      	volatility, the theoretical price, the best offer and bid for Put and Call options.
      </para>
      <para>
      	Below is the OptionCalculator example, which uses this component. The source code of the example can be found in the <legacyItalic>Samples/Options/OptionCalculator</legacyItalic> folder.
      </para>
      <mediaLink><image placement="left" xlink:href="option_desk" /></mediaLink>
    </introduction>
    
   <procedure>
   	<title>OptionCalculator example</title>
    	<steps class="ordered">
			<step>
				<content>
					<para>The <codeEntityReference>T:StockSharp.Xaml.OptionDesk</codeEntityReference> element is added to the XAML code and the
					<legacyBold>Desk</legacyBold> name is assigned to it.</para>
            		<code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="OptionCalculator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
        xmlns:xaml="http://schemas.stocksharp.com/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Title="{x:Static loc:LocalizedStrings.XamlStr396}" Height="400" Width="1030">
    <Grid Margin="5,5,5,5">
    
	    .........................................................
	    
	    <xaml:OptionDesk x:Name="Desk" Grid.Row="6" Grid.ColumnSpan="3" Grid.Column="0" />
    
	</Grid>
</Window>
	  				]]>
                  	</code>
				</content>
			</step>
			<step>
				<content>
				<para>The connection is created in the C# code. Depending on the type of connector an instance
					<codeEntityReference>T:StockSharp.OpenECry.OpenECryTrader</codeEntityReference> or <codeEntityReference>T:StockSharp.Rithmic.RithmicTrader</codeEntityReference>
					is initialized.</para>
            	<code title="C#" language="C#">
                  <![CDATA[
if (_connector == null)
{
	if (IsOpenECry.IsChecked == true)
	{
		var trader = new OpenECryTrader
		{
			// ... initialization
		};

		_connector = trader;
	}
	else
	{
		var trader = new RithmicTrader
		{
			// ... initialization
		};

		_connector = trader;
	}
}
]]>
                  	</code>
				</content>
				</step>
				<step>
					<content>
					<para>The messages provider for market data and instruments is specified.</para>
            		<code title="C#" language="C#">
                  <![CDATA[
Desk.MarketDataProvider = _connector;
Desk.SecurityProvider = _connector;
Desk.CurrentTime = null;
]]>
                   </code>
				</content>
				</step>
				<step>
				<content>
					<para>Upon getting the instruments:</para>
					<list class="ordered">
  							<listItem>To fill the futures collection for the drop-down list;</listItem>
  							<listItem>To initialize the selected instrument by the first element of this collection;</listItem>
  							<listItem>To fill the array by the options chain, where selected instrument acts as underlying asset;</listItem>
  							<listItem>To assign this array to the <codeEntityReference qualifyHint="true">P:StockSharp.Xaml.OptionDesk.Options</codeEntityReference> property;</listItem>
  							<listItem>To update optiondesk values using the 
  							<codeEntityReference qualifyHint="true">M:StockSharp.Xaml.OptionDesk.RefreshOptions</codeEntityReference> method.</listItem>
					</list>
            		<code title="C#" language="C#">
                  <![CDATA[
_connector.NewSecurities += securities =>
	this.GuiAsync(() =>
	{
		_assets.AddRange(securities.Where(s => s.Type == SecurityTypes.Future));

		if (SelectedAsset == null && _assets.Count > 0)
			SelectedAsset = _assets.First();

		if (SelectedAsset != null)
		{
			var newStrikes = securities
				.Where(s => s.Type == SecurityTypes.Option && s.UnderlyingSecurityId.CompareIgnoreCase(SelectedAsset.Id))
				.ToArray();

			if (newStrikes.Length > 0)
			{
				_options.AddRange(newStrikes);
				Desk.Options = _options;
				Desk.RefreshOptions();
			}
		}
	});
]]>
                  	</code>
					</content>
				</step>
				<step>
					<content>
						<para>Upon options parameters change:</para>
						<list class="ordered">
  							<listItem>To fill the array by options that have not been previously added to the control options collection;</listItem>
  							<listItem>If new options added, to update the <codeEntityReference qualifyHint="true">P:StockSharp.Xaml.OptionDesk.Options</codeEntityReference> property value;</listItem>
  							<listItem>
  								If new options added or parameters of the previously added options changed, then to update option desk 
  								<codeEntityReference qualifyHint="true">M:StockSharp.Xaml.OptionDesk.RefreshOptions</codeEntityReference>.
  							</listItem>
						</list>
            			<code title="C#" language="C#">
                  <![CDATA[
_connector.SecuritiesChanged += securities =>
{
	this.GuiAsync(() =>
	{
		if (SelectedAsset == null)
			return;
			
		var newStrikes = securities
				.Where(s => s.Type == SecurityTypes.Option && s.UnderlyingSecurityId.CompareIgnoreCase(SelectedAsset.Id))
				.Where(s => !_options.Contains(s))
				.ToArray();

		if (newStrikes.Length > 0)
		{
			_options.AddRange(newStrikes);
			Desk.Options = _options;
			Desk.RefreshOptions();
		}

		if (Desk.Options.Intersect(securities).Any())
			Desk.RefreshOptions();
	});
};

]]>
                  		</code>
					</content>
				</step>
			</steps>
 	</procedure>

    <relatedTopics>
		<link xlink:href="063708c5-b6a8-45f6-9ff9-608f89796a88">Greeks</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>