<?xml version="1.0" encoding="utf-8"?>
<topic id="3e8732d0-71a5-44ab-be04-c482d5a41d71" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      	The application SampleRithmic shows an example of working with <codeEntityReference>T:StockSharp.Rithmic.RithmicTrader</codeEntityReference>
      	s shown in the figure below. The example source code is in the <legacyItalic>Samples/Rithmic</legacyItalic> folder of the installation package.
      </para>
      <mediaLink><image placement="center" xlink:href="RithmicSample"/></mediaLink>
    </introduction>
    <procedure>
		<steps class="ordered">
			<step>
				<content>
					<para>First, you need to create an instance of the 
					<codeEntityReference qualifyHint="false">T:StockSharp.Rithmic.RithmicTrader</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[
Trader = new RithmicTrader { LogLevel = LogLevels.Debug };

// to set a credentials + server addr + certificates
Trader.UserName = settings.Username;
Trader.Server = settings.Server;
Trader.Password = pwd;
Trader.CertFile = settings.CertFile;

							]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>Then you should to subscribe required <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference> events:</para>
					<code language="C#">
<![CDATA[
// subscribe on successfully connect event
Trader.Connected += () =>
{
	// set flag (connection is established)
	_isConnected = true;

	// update gui labes
	this.GuiAsync(() => ChangeConnectStatus(true));
};

// subscribe on connection error event
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labes
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), "Connection was dropped.");	
});

// subscribe on successfully disconnect event
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// subscribe on error event
Trader.Error += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Data processing error"));

// new securities received
Trader.NewSecurities += securities => this.GuiAsync(() => _securitiesWindow.AddSecurities(securities));

// new own trades received
Trader.NewMyTrades += trades => this.GuiAsync(() => _myTradesWindow.Trades.AddRange(trades));

// new anonymous trades received
Trader.NewTrades += trades => this.GuiAsync(() => _tradesWindow.Trades.AddRange(trades));

// new orders received
Trader.NewOrders += orders => this.GuiAsync(() => _ordersWindow.Orders.AddRange(orders));

// new stop-orders received
Trader.NewStopOrders += orders => this.GuiAsync(() => _stopOrdersWindow.Orders.AddRange(orders));

// new portofolios (=accounts) received
Trader.NewPortfolios += portfolios =>
{
	// subscribe on portfolio updates
    portfolios.ForEach(Trader.RegisterPortfolio);
    
    _portfoliosWindow.Portfolios.AddRange(portfolios);
};

// new positions received
Trader.NewPositions += positions => this.GuiAsync(() => _positionsWindow.Positions.AddRange(positions));

// subscribe on error of order registration event
Trader.OrdersRegisterFailed += OrdersFailed;

// subscribe on error of order cancelling event
Trader.OrdersCancelFailed += OrdersFailed;

// subscribe on error of stop-order registration event
Trader.StopOrdersRegisterFailed += OrdersFailed;

// subscribe on error of stop-order cancelling event
Trader.StopOrdersCancelFailed += OrdersFailed;]]>
					</code>						
				</content>
			</step>
			<step>
				<content>
					<para>Then you need to connect to the <token>rithmic</token> server:</para>
            		<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
					</code>						
				</content>
			</step>
			
			<step>
				<content>
					<para>When the connection is successful, you can expect to trigger the 
					<codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewPortfolios</codeEntityReference> event. In this event handler
					you should subscribe to changes in the <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.PortfoliosChanged</codeEntityReference>
					portfolios using the <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference> method.</para>
				</content>
			</step>
			<step>
				<content>
					<para>Instruments search (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">in more detail</link>):</para>
					<mediaLink><image placement="center" xlink:href="RithmicSecurities"/></mediaLink>
         			<code language="C#">
            				<![CDATA[
private void Ok_Click(object sender, RoutedEventArgs e)
{
    var criteria = new Security
    {
     Code = SecCode.Text,
     Type = SecType.SelectedType
	};

    MainWindow.Instance.Trader.LookupSecurities(criteria);
	DialogResult = true;
}

							]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>To get trades and changes by the selected instrument (the <legacyBold>Bid Offer</legacyBold> button) you should call the
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> and 
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference> methods, respectively:</para>
            		<code language="C#">
            				<![CDATA[
private void QuotesClick(object sender, RoutedEventArgs e)
{
	var security = SecurityPicker.SelectedSecurity;
	var trader = MainWindow.Instance.Trader;

	if (trader.RegisteredSecurities.Contains(security))
	{
		trader.UnRegisterSecurity(security);
		trader.UnRegisterTrades(security);
	}
	else
	{
		trader.RegisterSecurity(security);
		trader.RegisterTrades(security);
	}
}
							]]>
					</code>
					<para>Trades will come in the <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrades</codeEntityReference>
					event, and changes will come in the <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> event.</para>
				</content>
			</step>
			<step>
				<content>
					<para>To request updates on the order books you need to use the 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference> method:</para>
            		<code language="C#">
            				<![CDATA[
private void DepthClick(object sender, RoutedEventArgs e)
{
	var trader = MainWindow.Instance.Trader;

	var window = _quotesWindows.SafeAdd(SecurityPicker.SelectedSecurity, security =>
	{
		// subscribe on order book flow
		trader.RegisterMarketDepth(security);

		// create order book window
		var wnd = new QuotesWindow { Title = security.Id + " " + LocalizedStrings.MarketDepth };
		wnd.MakeHideable();
		return wnd;
	});

	if (window.Visibility == Visibility.Visible)
		window.Hide();
	else
		window.Show();

	if (!_initialized)
	{
		TraderOnMarketDepthsChanged(new[] { trader.GetMarketDepth(SecurityPicker.SelectedSecurity) });
		trader.MarketDepthsChanged += TraderOnMarketDepthsChanged;
		_initialized = true;
	}
}
							]]>
					</code>
					<para>The order books appears in the <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference> event.</para>
				</content>
			</step>
			<step>
				<content>
					<para> orders registration the <legacyBold>New Order</legacyBold> button used. The 
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> method sends an order to the server:</para>
            		<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
	var newOrder = new OrderWindow
	{
		Order = new Order { Security = SecurityPicker.SelectedSecurity },
		Connector = MainWindow.Instance.Trader,
	};

	if (newOrder.ShowModal(this))
		MainWindow.Instance.Trader.RegisterOrder(newOrder.Order);
}
							]]>
					</code>						
				</content>
			</step>
		</steps>
    </procedure>
    
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>

 

