<?xml version="1.0" encoding="utf-8"?>
<topic id="5d9f8c0d-d05c-4a39-9fad-7148df4411ad" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
   <introduction>
      <para>
      	    The graphic component <codeEntityReference>T:StockSharp.Xaml.Charting.OptionPositionChart</codeEntityReference> - is the chart showing the position and
      	    the options “Greeks” relating to the underlying asset.
      </para>
      <para>
            The following is the example SampleOptionQuoting, in which this chart is used. The source code of the example can be found in the folder <legacyItalic>Samples/Options/SampleOptionQuoting</legacyItalic>.
      </para>
      
      <mediaLink><image placement="left" xlink:href="option_volsmile" /></mediaLink>
   </introduction>
    
               
   <procedure>
	<title>SampleOptionQuoting example</title>
		<steps class="ordered">
			<step>
				<content>
					<para>The <codeEntityReference>T:StockSharp.Xaml.Charting.OptionPositionChart</codeEntityReference> element is added to the XAML code and the
					<legacyBold>PosChart</legacyBold> name is assigned to it:</para>
            		<code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="OptionCalculator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
        xmlns:xaml="http://schemas.stocksharp.com/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Title="{x:Static loc:LocalizedStrings.XamlStr396}" Height="400" Width="1030">
    <Grid Margin="5,5,5,5">
    
	    .........................................................
	    
	    <xaml:OptionPositionChart x:Name="PosChart" Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="6" />

	</Grid>
</Window>
				]]>
                  	</code>
				</content>
			</step>
			<step>
				<content>
					<para>The <codeEntityReference>T:StockSharp.Rithmic.RithmicTrader</codeEntityReference> connection is created in the C# code:</para>
            		<code title="C#" language="C#">
                  <![CDATA[
Connector = new RithmicTrader
{

};

]]>
                  	</code>
				</content>
			</step>
			<step>
				<content>
					<para>To set the initial control settings:</para>
						<list class="ordered">
  							<listItem>
  									To reset to zero options positions collections
  									<codeEntityReference>P:StockSharp.Xaml.Charting.OptionPositionChart.Positions</codeEntityReference> and the underlying instrument
									<codeEntityReference>P:StockSharp.Xaml.Charting.OptionPositionChart.AssetPosition</codeEntityReference> of control;
							</listItem>
  							<listItem>
  									To redraw the chart with the initial values
									<codeEntityReference>M:StockSharp.Xaml.Charting.OptionPositionChart.Refresh(System.Decimal,System.Decimal,System.DateTimeOffset,System.DateTimeOffset)</codeEntityReference>;
							</listItem>
							<listItem>To specify messages provider for market data and instruments.</listItem>
						</list>
            			<code title="C#" language="C#">
                  <![CDATA[
PosChart.Positions.Clear();
PosChart.AssetPosition = null;
PosChart.Refresh(1, 1, default(DateTimeOffset), default(DateTimeOffset));

PosChart.MarketDataProvider = Connector;
PosChart.SecurityProvider = Connector;


]]>
                  		</code>
					</content>
				</step>
				<step>
					<content>
						<para>Upon getting the instruments to add underlying assets to the list:</para>
            			<code title="C#" language="C#">
                  <![CDATA[
Connector.NewSecurities += securities =>
		_assets.AddRange(securities.Where(s => s.Type == SecurityTypes.Future));
]]>
                  		</code>
					</content>
				</step>
				<step>
					<content>
						<para>Upon changing the Level1 of the underlying instrument or options, as well as getting a new trade to set the _isDirty flag.
						This allows to call the RefreshChart method (see below) in the timer event (the code is omitted) to redraw the chart.
						Thus we control the frequency of redrawing:</para>
            			<code title="C#" language="C#">
                  <![CDATA[
Connector.SecuritiesChanged += securities =>
{
	if ((PosChart.AssetPosition != null && securities.Contains(PosChart.AssetPosition.Security)) || PosChart.Positions.Cache.Select(p => p.Security).Intersect(securities).Any())
		_isDirty = true;
};

Connector.NewTrades += trades =>
{
	var assetPos = PosChart.AssetPosition;
	if (assetPos != null && trades.Any(t => t.Security == assetPos.Security))
		_isDirty = true;
};
]]>
                  		</code>
					</content>
				</step>
				<step>
					<content>
						<para>In the new position occurrence event handler to update the
							<codeEntityReference>P:StockSharp.Xaml.Charting.OptionPositionChart.Positions</codeEntityReference> and
							<codeEntityReference>P:StockSharp.Xaml.Charting.OptionPositionChart.AssetPosition</codeEntityReference> properties of the control.
							In this case, as well as upon position change, to call redraw the chart:</para>
            			<code title="C#" language="C#">
                  <![CDATA[
Connector.NewPositions += positions => this.GuiAsync(() =>
{
	var asset = SelectedAsset;

	if (asset == null)
		return;

	var assetPos = positions.FirstOrDefault(p => p.Security == asset);
	var newPos = positions.Where(p => p.Security.UnderlyingSecurityId == asset.Id).ToArray();

	if (assetPos == null && newPos.Length == 0)
		return;

	if (assetPos != null)
		PosChart.AssetPosition = assetPos;

	if (newPos.Length > 0)
		PosChart.Positions.AddRange(newPos);

	RefreshChart();
});

Connector.PositionsChanged += positions => this.GuiAsync(() =>
{
	if ((PosChart.AssetPosition != null && positions.Contains(PosChart.AssetPosition)) || positions.Intersect(PosChart.Positions.Cache).Any())
		RefreshChart();
});

]]>
                 			</code>
						</content>
					</step>
					<step>
					<content>
						<para>The method calls the redraw of the chart:</para>
            			<code title="C#" language="C#">
                  <![CDATA[
private void RefreshChart()
{
	var asset = SelectedAsset;
	var trade = asset.LastTrade;

	if (trade != null)
		PosChart.Refresh(trade.Price, asset.PriceStep ?? 1m, TimeHelper.Now, asset.ExpiryDate ?? DateTimeOffset.Now.Date + TimeSpan.FromDays(1));
}

]]>
               		</code>
				</content>
			</step>
		</steps>
 	</procedure>

    <relatedTopics>
		<link xlink:href="6fe5b321-a23d-415d-b3e3-af9de9212a20">Volatility trading</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>