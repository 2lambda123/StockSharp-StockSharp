<?xml version="1.0" encoding="utf-8"?>
<topic id="7664591a-b5b5-4f96-90c3-c1b7f59d5601" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The SampleBitStamp application shows an example of working with the <codeEntityReference qualifyHint="false">T:StockSharp.BitStamp.BitStampTrader</codeEntityReference>
      as shown in the figure below.
		The example source code is in the <legacyItalic>Samples/BitStamp</legacyItalic> folder of the installation package.</para>
		<mediaLink><image placement="center" xlink:href="BitStampSample"/></mediaLink>
    </introduction>
    
    <procedure>
		<steps class="ordered">
			<step>
				<content>
					<para>First, you need to create an instance of the
					<codeEntityReference qualifyHint="false">T:StockSharp.BitStamp.BitStampTrader</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[
Trader = new BitStampTrader() { LogLevel = LogLevels.Debug };
.....
Trader.ClientId = ClientId.Text.To<int>();
Trader.Key = Key.Text;
Trader.Secret = Secret.Password;
							]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>Next, you should subscribe on required <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference> events:</para>
            		<code language="C#">
            				<![CDATA[
// subscribe on successfully connect event
Trader.Connected += () =>
{
	// set flag (connection is established)
	_isConnected = true;

	// update gui labes
	this.GuiAsync(() => ChangeConnectStatus(true));
};

// subscribe on connection error event
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labes
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), "Connection was dropped.");	
});

// subscribe on successfully disconnect event
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// subscribe on error event
Trader.Error += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Data processing error"));

// new securities received
Trader.NewSecurities += securities => this.GuiAsync(() => _securitiesWindow.AddSecurities(securities));

// new own trades received
Trader.NewMyTrades += trades => this.GuiAsync(() => _myTradesWindow.Trades.AddRange(trades));

// new anonymous trades received
Trader.NewTrades += trades => this.GuiAsync(() => _tradesWindow.Trades.AddRange(trades));

// new orders received
Trader.NewOrders += orders => this.GuiAsync(() => _ordersWindow.Orders.AddRange(orders));

// new stop-orders received
Trader.NewStopOrders += orders => this.GuiAsync(() => _stopOrdersWindow.Orders.AddRange(orders));

// new portofolios (=accounts) received
Trader.NewPortfolios += portfolios =>
{
	// subscribe on portfolio updates
    portfolios.ForEach(Trader.RegisterPortfolio);
    
    _portfoliosWindow.Portfolios.AddRange(portfolios);
};

// new positions received
Trader.NewPositions += positions => this.GuiAsync(() => _positionsWindow.Positions.AddRange(positions));

// subscribe on error of order registration event
Trader.OrdersRegisterFailed += OrdersFailed;

// subscribe on error of order cancelling event
Trader.OrdersCancelFailed += OrdersFailed;

// subscribe on error of stop-order registration event
Trader.StopOrdersRegisterFailed += OrdersFailed;

// subscribe on error of stop-order cancelling event
Trader.StopOrdersCancelFailed += OrdersFailed;       
							]]>
					</code>						
				</content>
			</step>
			<step>
				<content>
					<para>Finally, you need to connect to <token>bitstamp</token> server:</para>
            		<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
					</code>						
				</content>
			</step>
					
			<step>
				<content>
					<para>Once connected, you can expect to trigger events:</para>
						<list class="bullet">
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> – 
								instrument change (last price, best bid/ask price, etc.) requested through 
								<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference> method.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference> – 
									order book change, requested through <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference> method.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrades</codeEntityReference> – 
									new ticks on instruments subscribed by using <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> method.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.PortfoliosChanged</codeEntityReference> – 
									portfolios change requested through <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference> method.</para>
							</listItem>
						</list>
				</content>
			</step>

			<step>
				<content>
					<para>Instruments search (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">in more detail</link>):</para>
				</content>
				<mediaLink><image placement="center" xlink:href="BtceSecurities"/></mediaLink>
			</step>
			<step>
				<content>
					<para>For updates on the selected instrument and ticks you need to use the
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference> and
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> methods, respectively:</para>
            		<code language="C#">
            				<![CDATA[
private void QuotesClick(object sender, RoutedEventArgs e)
{
	var security = SecurityPicker.SelectedSecurity;
	var trader = MainWindow.Instance.Trader;

	if (trader.RegisteredSecurities.Contains(security))
	{
		trader.UnRegisterSecurity(security);
		trader.UnRegisterTrades(security);
	}
	else
	{
		trader.RegisterSecurity(security);
		trader.RegisterTrades(security);
	}
}
							]]>
							</code>						
						</content>
					</step>
					<step>
						<content>
							<para>To request updates on the order books you need to use the 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference> method:</para>
            				<code language="C#">
            				<![CDATA[
private void DepthClick(object sender, RoutedEventArgs e)
{
	var trader = MainWindow.Instance.Trader;
	
	var security = SecurityPicker.SelectedSecurity;

	var window = _quotesWindows.SafeAdd(security, key =>
	{
		// create order book window
		var wnd = new QuotesWindow { Title = security.Id + " " + LocalizedStrings.MarketDepth };
		wnd.MakeHideable();
		return wnd;
	});

	if (window.Visibility == Visibility.Visible)
	{
		// unsubscribe from order book flow
		trader.UnRegisterMarketDepth(security);

		window.Hide();
	}
	else
	{
		// subscribe on order book flow
		trader.RegisterMarketDepth(security);

		window.Show();
	}

	if (!_initialized)
	{
		TraderOnMarketDepthsChanged(new[] { trader.GetMarketDepth(security) });
		trader.MarketDepthsChanged += TraderOnMarketDepthsChanged;
		_initialized = true;
	}
}
							]]>
							</code>
						</content>
					</step>
					
					
					<step>
						<content>
							<para>For orders registration the <legacyBold>New Order</legacyBold> button used. 
							The <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>
							method sends an order to the server:</para>
            				<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
	var newOrder = new OrderWindow
	{
		Order = new Order { Security = SecurityPicker.SelectedSecurity },
		Connector = MainWindow.Instance.Trader,
	};

	if (newOrder.ShowModal(this))
		MainWindow.Instance.Trader.RegisterOrder(newOrder.Order);
}
							]]>
							</code>						
						</content>
					</step>

				</steps>
		</procedure>
  </developerConceptualDocument>
</topic>