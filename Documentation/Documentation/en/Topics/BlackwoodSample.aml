<?xml version="1.0" encoding="utf-8"?>
<topic id="95d01586-b798-4d38-82aa-38d8533586b5" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The application SampleBlackwood shows an example of working with <codeEntityReference qualifyHint="false">T:StockSharp.Blackwood.BlackwoodTrader</codeEntityReference>,
      as shown in the figure below. The example source code is in the <legacyItalic>Samples/Blackwood</legacyItalic> folder of the installation package.</para>
		
		<mediaLink><image placement="center" xlink:href="blackwood_main_window"/></mediaLink>
    </introduction>
    <procedure>
				<steps class="ordered">
					<step>
						<content>
							<para>First, you need to create an instance of the <codeEntityReference qualifyHint="false">T:StockSharp.Blackwood.BlackwoodTrader</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
var address = Address.Text.To<IPAddress>();

Trader = new BlackwoodTrader
{
	Login = Login.Text,
	Password = Password.Password,
	ExecutionAddress = new IPEndPoint(address, BlackwoodAddresses.ExecutionPort),
	MarketDataAddress = new IPEndPoint(address, BlackwoodAddresses.MarketDataPort),
	HistoricalDataAddress = new IPEndPoint(address, BlackwoodAddresses.HistoricalDataPort),
};
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>Then you should to subscribe on required <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference> events:</para>
            				<code language="C#">
            				<![CDATA[
// subscribe on successfully connect event
Trader.Connected += () =>
{
	// set flag (connection is established)
	_isConnected = true;

	// update gui labes
	this.GuiAsync(() => ChangeConnectStatus(true));
};

// subscribe on connection error event
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labes
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), "Connection was dropped.");	
});

// subscribe on successfully disconnect event
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// subscribe on error event
Trader.Error += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Data processing error"));

// new securities received
Trader.NewSecurities += securities => this.GuiAsync(() => _securitiesWindow.AddSecurities(securities));

// new own trades received
Trader.NewMyTrades += trades => this.GuiAsync(() => _myTradesWindow.Trades.AddRange(trades));

// new anonymous trades received
Trader.NewTrades += trades => this.GuiAsync(() => _tradesWindow.Trades.AddRange(trades));

// new orders received
Trader.NewOrders += orders => this.GuiAsync(() => _ordersWindow.Orders.AddRange(orders));

// new stop-orders received
Trader.NewStopOrders += orders => this.GuiAsync(() => _stopOrdersWindow.Orders.AddRange(orders));

// new portofolios (=accounts) received
Trader.NewPortfolios += portfolios =>
{
	// subscribe on portfolio updates
    portfolios.ForEach(Trader.RegisterPortfolio);
    
    _portfoliosWindow.Portfolios.AddRange(portfolios);
};

// new positions received
Trader.NewPositions += positions => this.GuiAsync(() => _positionsWindow.Positions.AddRange(positions));

// subscribe on error of order registration event
Trader.OrdersRegisterFailed += OrdersFailed;

// subscribe on error of order cancelling event
Trader.OrdersCancelFailed += OrdersFailed;

// subscribe on error of stop-order registration event
Trader.StopOrdersRegisterFailed += OrdersFailed;

// subscribe on error of stop-order cancelling event
Trader.StopOrdersCancelFailed += OrdersFailed;

							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>Then you need to connect to <token>blackwood</token> server:</para>
            				<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>Once connected, you can expect to trigger events:</para>
							<list class="bullet">
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> – 
									instrument change (last price, best bid/ask price, etc.) requested through 
									<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference> method.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference> – 
									order book change, requested through <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference> method.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrades</codeEntityReference> – 
									new ticks on instruments subscribed by using <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> method.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.PortfoliosChanged</codeEntityReference> – 
									portfolios change requested through <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference> method.</para>
								</listItem>
							</list>
						</content>
					</step>

					<step>
						<content>
							<para>Instruments search (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">in more detail</link>):</para>
							
							<mediaLink><image placement="center" xlink:href="blackwood_securities"/></mediaLink>
            				
            				<code language="C#">
            				<![CDATA[
var criteria = new Security
{
	Currency = CurrencyTypes.USD,
	Code = SecCode.Text
};

MainWindow.Instance.Trader.LookupSecurities(criteria);
							]]>
							</code>
							
						</content>
					</step>

					<step>
						<content>
							<para>For updates on the selected instrument you need to call
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference> method:</para>
            				<code language="C#">
            				<![CDATA[
Trader.RegisterSecurity(SelectedSecurity);
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>To request updates on the order books you need to use the 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference> method:</para>
            				<code language="C#">
            				<![CDATA[
private void Quotes_Click(object sender, RoutedEventArgs e)
{
    var window = _quotesWindows.SafeAdd(SelectedSecurity, security =>
    {
        // subscribe on order book flow
        MainWindow.Instance.Trader.RegisterMarketDepth(security);

        // create order book window
        var wnd = new QuotesWindow { Title = security.Code + " quotes" };
        wnd.MakeHideable();
        return wnd;
    });

    if (window.Visibility == Visibility.Visible)
        window.Hide();
    else
        window.Show();
}
							]]>
							</code>
							<mediaLink><image placement="center" xlink:href="blackwood_market_depth"/></mediaLink>
						</content>
					</step>

					<step>
						<content>
							<para>For orders registration the <legacyItalic>New Order</legacyItalic> button used. The <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>
							 method sends an order to the server:</para>
            				<code language="C#">
            				<![CDATA[
private void Send_Click(object sender, RoutedEventArgs e)
{
    var order = new Order
    {
        Type = IsMarket.IsChecked == true ? OrderTypes.Market : OrderTypes.Limit,
        Portfolio = Portfolio.SelectedPortfolio,
        Volume = Volume.Text.To<decimal>(),
        Price = Price.Text.To<decimal>(),
        Security = Security,
        Direction = IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
    };

    MainWindow.Instance.Trader.RegisterOrder(order);

    DialogResult = true;
}
							]]>
							</code>						
						</content>
					</step>

				</steps>
		</procedure>
  </developerConceptualDocument>
</topic>