<?xml version="1.0" encoding="utf-8"?>
<topic id="2b16e1d6-32bf-426d-8d20-08020f5f1f40" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The application SampleETrade shows an example of working with <codeEntityReference qualifyHint="false">T:StockSharp.ETrade.ETradeTrader</codeEntityReference>
      as shown in the figure below. The example source code is in the <legacyItalic>Samples/ETrade</legacyItalic> folder of the installation package.</para>
		
		<mediaLink><image placement="center" xlink:href="etrade_sample_main_window"/></mediaLink>
    </introduction>
    <procedure>
				<steps class="ordered">
					<step>
						<content>
							<para>First, you need to create an instance of the <codeEntityReference qualifyHint="false">T:StockSharp.ETrade.ETradeTrader</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
Trader = new ETradeTrader(IsSandbox, IsSandbox ? GetSandboxSecurities() : null)
{
	ConsumerKey = ConsumerKey,
	ConsumerSecret = secret,
	LogLevel = LogLevels.Debug,
	DumpRestData = true
};
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>Then you should to subscribe on required <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference> events:</para>
            				<code language="C#">
            				<![CDATA[
// subscribe on successfully connect event
Trader.Connected += () =>
{
	// set flag (connection is established)
	_isConnected = true;

	// update gui labes
	this.GuiAsync(() => ChangeConnectStatus(true));
};

// subscribe on connection error event
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labes
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), "Connection was dropped.");	
});

// subscribe on successfully disconnect event
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// subscribe on error event
Trader.Error += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Data processing error"));

// new securities received
Trader.NewSecurities += securities => this.GuiAsync(() => _securitiesWindow.AddSecurities(securities));

// new own trades received
Trader.NewMyTrades += trades => this.GuiAsync(() => _myTradesWindow.Trades.AddRange(trades));

// new anonymous trades received
Trader.NewTrades += trades => this.GuiAsync(() => _tradesWindow.Trades.AddRange(trades));

// new orders received
Trader.NewOrders += orders => this.GuiAsync(() => _ordersWindow.Orders.AddRange(orders));

// new stop-orders received
Trader.NewStopOrders += orders => this.GuiAsync(() => _stopOrdersWindow.Orders.AddRange(orders));

// new positions received
Trader.NewPositions += positions => this.GuiAsync(() => _positionsWindow.Positions.AddRange(positions));

// subscribe on error of order registration event
Trader.OrdersRegisterFailed += OrdersFailed;

// subscribe on error of order cancelling event
Trader.OrdersCancelFailed += OrdersFailed;

// subscribe on error of stop-order registration event
Trader.StopOrdersRegisterFailed += OrdersFailed;

// subscribe on error of stop-order cancelling event
Trader.StopOrdersCancelFailed += OrdersFailed;
							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>Next, you should to sign in the <token>etrade</token> server:</para>
            				
            				<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
							</code>	
							
							<para>If the authorization was already carried out on the current day, the single call of 
							<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.BusinessEntities.IConnector.Connect</codeEntityReference>
							is enough. Otherwise <codeEntityReference qualifyHint="false">T:StockSharp.ETrade.ETradeTrader</codeEntityReference>
							automatically launches the full authorization procedure, where the user will be prompted to enter a username/password to the <token>etrade</token> site,
							after which the user will receive a verification code.
							
							The verification code must be written in the <codeEntityReference qualifyHint="true">P:StockSharp.ETrade.ETradeTrader.VerificationCode</codeEntityReference>
							property, and then the authorization procedure should be re-started:</para>
							
            				<code language="C#">
            				<![CDATA[
Trader.VerificationCode = Verifier;
Trader.Connect();
							]]>
							</code>							
						</content>
					</step>
					<step>
					<content>
							<para>Once connected, you can expect to trigger events:</para>
							<list class="bullet">
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> –
									instrument change (last price, best bid/ask price, etc.) requested through <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference> method.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.PortfoliosChanged</codeEntityReference> – 
									portfolios change requested through <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference> method.</para>
								</listItem>
							</list>							
						</content>
					</step>

					<step>
						<content>
							<para>Instruments search (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">in more detail</link>):</para>
							
							<mediaLink><image placement="center" xlink:href="etrade_sample_securities"/></mediaLink>
            				
            				<code language="C#">
            				<![CDATA[
void SearchTextPreviewKeyUp(object sender, KeyEventArgs e)
{
	if (e.Key != Key.Enter)
		return;

	var text = SearchText.Text.Trim();

	if (text.IsEmpty())
		return;
	MainWindow.Instance.Trader.LookupSecurities(new Security { Name = text });
}
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>To request updates on the portfolios you need to use the 
							<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference> method:</para>
            				<code language="C#">
            				<![CDATA[
// new portofolios (=accounts) received
Trader.NewPortfolios += portfolios =>
{
	// subscribe on portfolio updates
    portfolios.ForEach(Trader.RegisterPortfolio);
    
    _portfoliosWindow.Portfolios.AddRange(portfolios);
};
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>For orders registration the New Order button used. The 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> 
							method sends an order to the server:</para>
            				<code language="C#">
            				<![CDATA[
private void SendClick(object sender, RoutedEventArgs e)
{
	var order = new Order
	{
		Type = IsMarket.IsChecked == true ? OrderTypes.Market :OrderTypes.Limit,
		Portfolio = Portfolio.SelectedPortfolio,
		Volume = Volume.Text.To<decimal>(),
		Price = Price.Text.To<decimal>(),
		Security = Security,
		Direction = IsBuy.IsChecked == true ? OrderDirections.Buy :OrderDirections.Sell,
	};

	MainWindow.Instance.Trader.RegisterOrder(order);
	DialogResult = true;
}
							]]>
							</code>						
						</content>
					</step>
				</steps>
		</procedure>
  </developerWalkthroughDocument>
</topic>