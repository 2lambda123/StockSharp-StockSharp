<?xml version="1.0" encoding="utf-8"?>
<topic id="d71b5e6e-fc05-429d-9888-7603f6b7c508" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      <codeEntityReference>T:StockSharp.Xaml.Charting.BufferedChart</codeEntityReference> - графический компонет для построения 
      биржевых графиков, который использует буфферизацию при выводе данных. Этот компонет случит "оберткой" для других типов <legacyItalic>чартов</legacyItalic>,
      поэтому при создании экземпляра <codeEntityReference>T:StockSharp.Xaml.Charting.BufferedChart</codeEntityReference> в его конструктор необходимо
      передать класс <legacyItalic>чарта</legacyItalic>, который реализует интерфейс <codeEntityReference>T:StockSharp.Xaml.Charting.IChart</codeEntityReference>.
      Например, <codeEntityReference>T:StockSharp.Xaml.Charting.Chart</codeEntityReference> или <codeEntityReference>T:StockSharp.Xaml.Charting.ChartPanel</codeEntityReference>.
      </para>
      <para>
      	Ниже приведен фрагмент кода с использованием <codeEntityReference>T:StockSharp.Xaml.Charting.BufferedChart</codeEntityReference>, который взят из примера
      	Samples/Testing/SampleHistoryTesting. 
      </para>
    </introduction>
    
      <procedure>
      <title>Пример построения графика при помощи BufferedChart</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>
					  В XAML создаем чарт типа <codeEntityReference>T:StockSharp.Xaml.Charting.ChartPanel</codeEntityReference> и присваиваем ему имя <legacyBold>Chart</legacyBold>.
				  </para>
				   <code title="XAML" language="XAML">
	  				<![CDATA[
	  				<charting:ChartPanel x:Name="Chart" ShowOverview="False" />
	  				]]>
              </code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  В коде главного окна декларируем переменные для элементов, которые будут использоваться при построении графика, а также инициализируем экземпляр
					  <codeEntityReference>T:StockSharp.Xaml.Charting.BufferedChart</codeEntityReference>, передав в его конструктор, созданного в XAML 
					  <codeEntityReference>T:StockSharp.Xaml.Charting.ChartPanel</codeEntityReference>.
				  </para>
				   <code title="C#" language="C#">
              		<![CDATA[
private readonly BufferedChart _bufferedChart;
private ChartCandleElement _candlesElem;
private ChartTradeElement _tradesElem;
private ChartIndicatorElement _shortElem;
private SimpleMovingAverage _shortMa;
private ChartIndicatorElement _longElem;
private SimpleMovingAverage _longMa;
private ChartArea _area;

public MainWindow()
{
	InitializeComponent();
	_bufferedChart = new BufferedChart(Chart);
	
	..........................................

}
	  				]]>
	   
				   </code>
		  		</content>
		  </step>
		  <step>
			  <content>
				  <para>
					  В коде главного окна декларируем переменные для элементов, которые будут использоваться при построении графика, а также инициализируем экземпляр
					  <codeEntityReference>T:StockSharp.Xaml.Charting.BufferedChart</codeEntityReference>, передав в его конструктор, созданного в XAML 
					  <codeEntityReference>T:StockSharp.Xaml.Charting.ChartPanel</codeEntityReference>.
				  </para>
				   <code title="C#" language="C#">
              		<![CDATA[
private void InitChart()
{
	_bufferedChart.ClearAreas();
	Curve.Clear();
	PositionCurve.Clear();

	_area = new ChartArea();
	_bufferedChart.AddArea(_area);

	_candlesElem = new ChartCandleElement { ShowAxisMarker = false };
	_bufferedChart.AddElement(_area, _candlesElem);

	_tradesElem = new ChartTradeElement { FullTitle = "Сделки" };
	_bufferedChart.AddElement(_area, _tradesElem);
}
	  				]]>
 
				   </code>
		  		</content>
		  </step>
		   <step>
			  <content>
				  <para>
					  В методе <legacyBold>InitChart</legacyBold> настраиваем и добавляем необходимые элементы к <legacyItalic>чарту</legacyItalic>.
				  </para>
				   <code title="C#" language="C#">
              		<![CDATA[
private void InitChart()
{
	_bufferedChart.ClearAreas();
	Curve.Clear();
	PositionCurve.Clear();

	_area = new ChartArea();
	_bufferedChart.AddArea(_area);

	_candlesElem = new ChartCandleElement { ShowAxisMarker = false };
	_bufferedChart.AddElement(_area, _candlesElem);

	_tradesElem = new ChartTradeElement { FullTitle = "Сделки" };
	_bufferedChart.AddElement(_area, _tradesElem);
}
	  				]]>
 
				   </code>
		  		</content>
		  </step>
		    <step>
			  <content>
				  <para>
					  Непосредственно перед созданием стратегии, создаем индикаторы и графические элементы индикаторов, последние также добавляем к <legacyBold>чарту</legacyBold>.
					  Обратите внимание, что <legacyBold>чарт</legacyBold> передается в конструктор стратегии. Отрисовка графика будет выполнятся в коде самой стратегии. См. ниже.
				  </para>
				   <code title="C#" language="C#">
              		<![CDATA[
_shortMa = new SimpleMovingAverage { Length = 10 };

_shortElem = new ChartIndicatorElement
	{
		Color = Colors.Coral,
		ShowAxisMarker = false,
		FullTitle = _shortMa.ToString()
	};
_bufferedChart.AddElement(_area, _shortElem);

_longMa = new SimpleMovingAverage { Length = 80 };

_longElem = new ChartIndicatorElement
	{
		ShowAxisMarker = false,
		FullTitle = _longMa.ToString()
	};
	
_bufferedChart.AddElement(_area, _longElem);

// create strategy based on 80 5-min и 10 5-min
var strategy = new SmaStrategy(_bufferedChart, _candlesElem, _tradesElem, _shortMa, _shortElem, _longMa, _longElem, series)
		{
			Volume = 1,
			Portfolio = portfolio,
			Security = security,
			Connector = connector,
			LogLevel = DebugLogCheckBox.IsChecked == true ? LogLevels.Debug : LogLevels.Info,

			// by default interval is 1 min,
			// it is excessively for time range with several months
			UnrealizedPnLInterval = ((stopTime - startTime).Ticks / 1000).To<TimeSpan>()
		};
	  				]]>
 
				   </code>
		  		</content>
		  </step>
		  		   <step>
			  <content>
				  <para>
					  Отрисовка графика выполняется в коде стратегии при получении каждой завершенной свечи. Если во время формирования свечи произошла сделка, 
					  то маркер сделки также отображается на графике.
				  </para>
				   <code title="C#" language="C#">
              		<![CDATA[
var trade = _myTrades.FirstOrDefault();
_myTrades.Clear();

var dict = new Dictionary<IChartElement, object>
		{
			{ _candlesElem, candle },
			{ _shortElem, shortValue },
			{ _longElem, longValue },
			{ _tradesElem, trade }
		};

_chart.Draw(candle.OpenTime, dict);
	  				]]>
 
				   </code>
		  		</content>
		  </step>
		  </steps>
    </procedure>
  </developerConceptualDocument>
</topic>



